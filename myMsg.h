// Generated by gencpp from file test_pub_sub/myMsg.msg
// DO NOT EDIT!


#ifndef TEST_PUB_SUB_MESSAGE_MYMSG_H
#define TEST_PUB_SUB_MESSAGE_MYMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_pub_sub
{
template <class ContainerAllocator>
struct myMsg_
{
  typedef myMsg_<ContainerAllocator> Type;

  myMsg_()
    : num(0)
    , color()
    , name()  {
    }
  myMsg_(const ContainerAllocator& _alloc)
    : num(0)
    , color(_alloc)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::test_pub_sub::myMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_pub_sub::myMsg_<ContainerAllocator> const> ConstPtr;

}; // struct myMsg_

typedef ::test_pub_sub::myMsg_<std::allocator<void> > myMsg;

typedef boost::shared_ptr< ::test_pub_sub::myMsg > myMsgPtr;
typedef boost::shared_ptr< ::test_pub_sub::myMsg const> myMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_pub_sub::myMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_pub_sub::myMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_pub_sub::myMsg_<ContainerAllocator1> & lhs, const ::test_pub_sub::myMsg_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.color == rhs.color &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_pub_sub::myMsg_<ContainerAllocator1> & lhs, const ::test_pub_sub::myMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_pub_sub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_pub_sub::myMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_pub_sub::myMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_pub_sub::myMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_pub_sub::myMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pub_sub::myMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_pub_sub::myMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_pub_sub::myMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df04315b41425d6ea448981ae33c61d3";
  }

  static const char* value(const ::test_pub_sub::myMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf04315b41425d6eULL;
  static const uint64_t static_value2 = 0xa448981ae33c61d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_pub_sub::myMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_pub_sub/myMsg";
  }

  static const char* value(const ::test_pub_sub::myMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_pub_sub::myMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num\n"
"string color\n"
"string name\n"
;
  }

  static const char* value(const ::test_pub_sub::myMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_pub_sub::myMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.color);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct myMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_pub_sub::myMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_pub_sub::myMsg_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_PUB_SUB_MESSAGE_MYMSG_H
